import numpy as np
import pandas as pd
import joblib

# 读取数据
data = pd.read_csv('process1.csv', header=0, sep=',')

# 将数据中每一列的0用每一列平均值替换
mean = data.mean(axis=0)
data.replace(0, mean, inplace=True)

# 将空值用平均值替换
data.fillna(mean, inplace=True)

# 删除重复值
data.drop_duplicates(inplace=True)

# 获取特征值
x = data.iloc[:, :-15]

# 获取目标值
y = data.iloc[:, -15:]

# 标准化
from sklearn.preprocessing import StandardScaler

ss_x = StandardScaler()
x = ss_x.fit_transform(x)
ss_y = StandardScaler()
y = ss_y.fit_transform(y)

# 划分训练集和测试集
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=3)

# 深度学习
from keras.callbacks import EarlyStopping
from keras import Sequential
from keras.layers import *

# EarlyStopping，防止过拟合
es = EarlyStopping(monitor="val_loss", patience=5)
# 全连接网络
model = Sequential()
model.add(Dense(32, input_dim=x_train.shape[1]))
model.add(Activation('relu'))
model.add(Dense(128))
model.add(Activation('relu'))
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dense(32))
model.add(Activation('relu'))
model.add(Dense(y_train.shape[1]))
# 编译
model.compile(optimizer='adam', loss='mse', metrics=['mse'])
# 训练
history = model.fit(x_train, y_train, epochs=200, batch_size=128, validation_split=0.2, callbacks=[es])
# 预测
y_pred = model.predict(x_test)

# 模型评价
from sklearn.metrics import mean_squared_error, r2_score

print('mse:', mean_squared_error(y_test, y_pred))
print('r2_score:', r2_score(y_test, y_pred))

import matplotlib.pyplot as plt


def plot_history(history):
    plt.figure()
    plt.xlabel('Epoch')
    plt.ylabel('Mean Abs Error [%]')
    # 绘制训练集损失
    plt.plot(history.epoch, np.array(history.history['mse']),
             label='Train loss')
    # 绘制验证集损失
    plt.plot(history.epoch, np.array(history.history['val_mse']),
             label='Val loss')
    plt.legend()
    # 限制y的取值
    plt.ylim([0, 1])
    plt.show()


# 绘图
plot_history(history)

plt.plot(ss_y.inverse_transform(y_pred)[0])
plt.plot(ss_y.inverse_transform(y_test)[0])
plt.legend(['predicted values', 'real values'])
plt.savefig('plot.png')
plt.show()

joblib.dump(model, 'process1-ann.model')
model1 = joblib.load('process1-ann.model')
